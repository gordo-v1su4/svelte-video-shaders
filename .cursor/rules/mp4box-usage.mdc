# mp4box.js Integration and Usage Rule

This rule documents the correct way to integrate and use [mp4box.js](https://github.com/gpac/mp4box.js) for MP4 demuxing in the Svelte Video Shaders project, ensuring compatibility with SvelteKit, WebCodecs, and Three.js.

## Why mp4box.js?
- **Demuxes MP4 containers** to extract video samples for decoding with WebCodecs
- Required for frame-accurate, real-time video playback and shader effects
- Works in browsers and with modern build tools (Vite)

## Import Pattern

**Always use the Vite-compatible import:**
```javascript
// ✅ Good: Vite-compatible import
import { default as MP4BoxModule } from 'mp4box';

// ✅ Alternative: namespace import
import * as MP4Box from 'mp4box';
```
**Never use direct default import without curly braces:**
```javascript
// ❌ Bad: This may fail in Vite
import MP4Box from 'mp4box';
```

## Setup and Usage

1. **Create the MP4Box file instance:**
   ```javascript
   const mp4boxfile = MP4BoxModule.createFile();
   ```
2. **Set up event handlers:**
   - `onReady`: Configure the WebCodecs VideoDecoder using track info
   - `onSamples`: Feed extracted samples to the decoder
   ```javascript
   mp4boxfile.onReady = (info) => {
     const track = info.videoTracks[0];
     if (VideoDecoder.isConfigSupported(track.codec)) {
       videoDecoder.configure({
         codec: track.codec,
         codedWidth: track.track_width,
         codedHeight: track.track_height
       });
       mp4boxfile.setExtractionOptions(track.id, null, { nbSamples: 100 });
       mp4boxfile.start();
     }
   };

   mp4boxfile.onSamples = (track_id, ref, samples) => {
     for (const sample of samples) {
       const type = sample.is_sync ? 'key' : 'delta';
       const chunk = new EncodedVideoChunk({
         type,
         timestamp: sample.cts,
         duration: sample.duration,
         data: sample.data
       });
       if (videoDecoder.state === 'configured') {
         videoDecoder.decode(chunk);
       }
     }
   };
   ```
3. **Feed data to mp4box.js:**
   - Use streaming fetch and append buffers with correct `fileStart` offsets
   ```javascript
   const response = await fetch(src);
   const reader = response.body.getReader();
   let offset = 0;
   while (true) {
     const { done, value } = await reader.read();
     if (done) {
       mp4boxfile.flush();
       break;
     }
     const buffer = value.buffer;
     buffer.fileStart = offset;
     offset += buffer.byteLength;
     mp4boxfile.appendBuffer(buffer);
   }
   ```

## Best Practices
- **Always check codec support** with `VideoDecoder.isConfigSupported()` before configuring
- **Buffer enough samples** (e.g., `nbSamples: 100`) for smooth playback
- **Properly clean up**: call `mp4boxfile.stop()` and release resources on component destroy
- **Reference:** See [ShaderPlayer.svelte](mdc:src/lib/ShaderPlayer.svelte) for a full implementation

## Good Example
```javascript
import { default as MP4BoxModule } from 'mp4box';
const mp4boxfile = MP4BoxModule.createFile();
mp4boxfile.onReady = (info) => { /* ... */ };
mp4boxfile.onSamples = (track_id, ref, samples) => { /* ... */ };
// ...fetch and appendBuffer as above
```

## Bad Example
```javascript
import MP4Box from 'mp4box'; // ❌ Not Vite-compatible
// ...missing event handlers or improper buffer feeding
```

## References
- [mp4box.js GitHub](https://github.com/gpac/mp4box.js)
- [ShaderPlayer.svelte](mdc:src/lib/ShaderPlayer.svelte)
- [WebCodecs API Best Practices](mdc:.cursor/rules/webcodecs-api.mdc)
description:
globs:
alwaysApply: false
---
